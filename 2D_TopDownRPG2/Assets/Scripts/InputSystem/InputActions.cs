//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMove"",
            ""id"": ""6e88849b-c424-474a-a82e-5e64966eb493"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c49ebfd2-0d93-4323-9c63-157a0d1f1188"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0c01ba33-23d5-4984-a850-dab6fb187ffd"",
                    ""path"": ""2DVector"",
                    ""interactions"": ""Hold(duration=1.401298E-45,pressPoint=1.401298E-45)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fa4ceccd-ac26-4c9b-8722-cbedab96a048"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5832a603-69d6-4029-b296-944f8b8a4e42"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""95705082-4d21-4d51-83c8-627a3a511837"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2f9297e8-f175-44af-89d6-8862ec1bc0a7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerAbilityTrigger"",
            ""id"": ""32d15058-a3ee-4834-b93e-3b710cce39f8"",
            ""actions"": [
                {
                    ""name"": ""Ability1"",
                    ""type"": ""Button"",
                    ""id"": ""38530c9d-cb2b-4c7c-a98a-45327487faeb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability2"",
                    ""type"": ""Button"",
                    ""id"": ""22d4d40a-23c5-4a74-9b50-9e462f4a982f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability3"",
                    ""type"": ""Button"",
                    ""id"": ""9b517fae-182e-473a-a490-331a2f508ce9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability4"",
                    ""type"": ""Button"",
                    ""id"": ""29031967-267b-4d20-bc81-9394dfb9f1ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability5"",
                    ""type"": ""Button"",
                    ""id"": ""f1f62609-326b-4ec4-9911-fa529ad99a6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""6afda6ef-27cc-4312-a5a5-363dcdfcad53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consum1"",
                    ""type"": ""Button"",
                    ""id"": ""9c35ec9f-8be0-4f64-93c3-0baa8e987a76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consum2"",
                    ""type"": ""Button"",
                    ""id"": ""edf161b5-adad-4bbb-959d-ab9810b400e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2daf9bac-2eac-4ecd-ae0a-2ca56a7337fe"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b3db00b-79ae-47ca-94c9-ca8bf0f4c910"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7136f4f2-2391-4dc9-9789-934b0d721f0b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""693008f7-b21a-42fc-b8db-17d385dcb024"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ef506e6-1b63-4c45-9a85-56c35a0947a3"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0eb1fbd5-8a45-448b-9eb4-270f1de31fa3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ad7d2f3-cbe0-416f-8c87-6d7713d9261e"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consum1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""351ee90a-058e-482e-8c49-32ab208d183b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consum2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interact"",
            ""id"": ""d7d446c3-e037-4c0d-ac92-915e04759c44"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""83153d03-1b44-46c1-9a16-0c2b7081d43f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipConversation"",
                    ""type"": ""Button"",
                    ""id"": ""9bc69488-1682-4be7-86a6-24c9a68d9f48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e105dc3-0d50-47d8-8673-e0175326af74"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eb40f0c-98c2-489e-82b8-05877aa200ef"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipConversation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMove
        m_PlayerMove = asset.FindActionMap("PlayerMove", throwIfNotFound: true);
        m_PlayerMove_Move = m_PlayerMove.FindAction("Move", throwIfNotFound: true);
        // PlayerAbilityTrigger
        m_PlayerAbilityTrigger = asset.FindActionMap("PlayerAbilityTrigger", throwIfNotFound: true);
        m_PlayerAbilityTrigger_Ability1 = m_PlayerAbilityTrigger.FindAction("Ability1", throwIfNotFound: true);
        m_PlayerAbilityTrigger_Ability2 = m_PlayerAbilityTrigger.FindAction("Ability2", throwIfNotFound: true);
        m_PlayerAbilityTrigger_Ability3 = m_PlayerAbilityTrigger.FindAction("Ability3", throwIfNotFound: true);
        m_PlayerAbilityTrigger_Ability4 = m_PlayerAbilityTrigger.FindAction("Ability4", throwIfNotFound: true);
        m_PlayerAbilityTrigger_Ability5 = m_PlayerAbilityTrigger.FindAction("Ability5", throwIfNotFound: true);
        m_PlayerAbilityTrigger_BasicAttack = m_PlayerAbilityTrigger.FindAction("BasicAttack", throwIfNotFound: true);
        m_PlayerAbilityTrigger_Consum1 = m_PlayerAbilityTrigger.FindAction("Consum1", throwIfNotFound: true);
        m_PlayerAbilityTrigger_Consum2 = m_PlayerAbilityTrigger.FindAction("Consum2", throwIfNotFound: true);
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_Interact = m_Interact.FindAction("Interact", throwIfNotFound: true);
        m_Interact_SkipConversation = m_Interact.FindAction("SkipConversation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMove
    private readonly InputActionMap m_PlayerMove;
    private List<IPlayerMoveActions> m_PlayerMoveActionsCallbackInterfaces = new List<IPlayerMoveActions>();
    private readonly InputAction m_PlayerMove_Move;
    public struct PlayerMoveActions
    {
        private @InputActions m_Wrapper;
        public PlayerMoveActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMove_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMoveActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerMoveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerMoveActions instance)
        {
            if (m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMoveActions @PlayerMove => new PlayerMoveActions(this);

    // PlayerAbilityTrigger
    private readonly InputActionMap m_PlayerAbilityTrigger;
    private List<IPlayerAbilityTriggerActions> m_PlayerAbilityTriggerActionsCallbackInterfaces = new List<IPlayerAbilityTriggerActions>();
    private readonly InputAction m_PlayerAbilityTrigger_Ability1;
    private readonly InputAction m_PlayerAbilityTrigger_Ability2;
    private readonly InputAction m_PlayerAbilityTrigger_Ability3;
    private readonly InputAction m_PlayerAbilityTrigger_Ability4;
    private readonly InputAction m_PlayerAbilityTrigger_Ability5;
    private readonly InputAction m_PlayerAbilityTrigger_BasicAttack;
    private readonly InputAction m_PlayerAbilityTrigger_Consum1;
    private readonly InputAction m_PlayerAbilityTrigger_Consum2;
    public struct PlayerAbilityTriggerActions
    {
        private @InputActions m_Wrapper;
        public PlayerAbilityTriggerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Ability1 => m_Wrapper.m_PlayerAbilityTrigger_Ability1;
        public InputAction @Ability2 => m_Wrapper.m_PlayerAbilityTrigger_Ability2;
        public InputAction @Ability3 => m_Wrapper.m_PlayerAbilityTrigger_Ability3;
        public InputAction @Ability4 => m_Wrapper.m_PlayerAbilityTrigger_Ability4;
        public InputAction @Ability5 => m_Wrapper.m_PlayerAbilityTrigger_Ability5;
        public InputAction @BasicAttack => m_Wrapper.m_PlayerAbilityTrigger_BasicAttack;
        public InputAction @Consum1 => m_Wrapper.m_PlayerAbilityTrigger_Consum1;
        public InputAction @Consum2 => m_Wrapper.m_PlayerAbilityTrigger_Consum2;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAbilityTrigger; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAbilityTriggerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerAbilityTriggerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerAbilityTriggerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerAbilityTriggerActionsCallbackInterfaces.Add(instance);
            @Ability1.started += instance.OnAbility1;
            @Ability1.performed += instance.OnAbility1;
            @Ability1.canceled += instance.OnAbility1;
            @Ability2.started += instance.OnAbility2;
            @Ability2.performed += instance.OnAbility2;
            @Ability2.canceled += instance.OnAbility2;
            @Ability3.started += instance.OnAbility3;
            @Ability3.performed += instance.OnAbility3;
            @Ability3.canceled += instance.OnAbility3;
            @Ability4.started += instance.OnAbility4;
            @Ability4.performed += instance.OnAbility4;
            @Ability4.canceled += instance.OnAbility4;
            @Ability5.started += instance.OnAbility5;
            @Ability5.performed += instance.OnAbility5;
            @Ability5.canceled += instance.OnAbility5;
            @BasicAttack.started += instance.OnBasicAttack;
            @BasicAttack.performed += instance.OnBasicAttack;
            @BasicAttack.canceled += instance.OnBasicAttack;
            @Consum1.started += instance.OnConsum1;
            @Consum1.performed += instance.OnConsum1;
            @Consum1.canceled += instance.OnConsum1;
            @Consum2.started += instance.OnConsum2;
            @Consum2.performed += instance.OnConsum2;
            @Consum2.canceled += instance.OnConsum2;
        }

        private void UnregisterCallbacks(IPlayerAbilityTriggerActions instance)
        {
            @Ability1.started -= instance.OnAbility1;
            @Ability1.performed -= instance.OnAbility1;
            @Ability1.canceled -= instance.OnAbility1;
            @Ability2.started -= instance.OnAbility2;
            @Ability2.performed -= instance.OnAbility2;
            @Ability2.canceled -= instance.OnAbility2;
            @Ability3.started -= instance.OnAbility3;
            @Ability3.performed -= instance.OnAbility3;
            @Ability3.canceled -= instance.OnAbility3;
            @Ability4.started -= instance.OnAbility4;
            @Ability4.performed -= instance.OnAbility4;
            @Ability4.canceled -= instance.OnAbility4;
            @Ability5.started -= instance.OnAbility5;
            @Ability5.performed -= instance.OnAbility5;
            @Ability5.canceled -= instance.OnAbility5;
            @BasicAttack.started -= instance.OnBasicAttack;
            @BasicAttack.performed -= instance.OnBasicAttack;
            @BasicAttack.canceled -= instance.OnBasicAttack;
            @Consum1.started -= instance.OnConsum1;
            @Consum1.performed -= instance.OnConsum1;
            @Consum1.canceled -= instance.OnConsum1;
            @Consum2.started -= instance.OnConsum2;
            @Consum2.performed -= instance.OnConsum2;
            @Consum2.canceled -= instance.OnConsum2;
        }

        public void RemoveCallbacks(IPlayerAbilityTriggerActions instance)
        {
            if (m_Wrapper.m_PlayerAbilityTriggerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerAbilityTriggerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerAbilityTriggerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerAbilityTriggerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerAbilityTriggerActions @PlayerAbilityTrigger => new PlayerAbilityTriggerActions(this);

    // Interact
    private readonly InputActionMap m_Interact;
    private List<IInteractActions> m_InteractActionsCallbackInterfaces = new List<IInteractActions>();
    private readonly InputAction m_Interact_Interact;
    private readonly InputAction m_Interact_SkipConversation;
    public struct InteractActions
    {
        private @InputActions m_Wrapper;
        public InteractActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Interact_Interact;
        public InputAction @SkipConversation => m_Wrapper.m_Interact_SkipConversation;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void AddCallbacks(IInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @SkipConversation.started += instance.OnSkipConversation;
            @SkipConversation.performed += instance.OnSkipConversation;
            @SkipConversation.canceled += instance.OnSkipConversation;
        }

        private void UnregisterCallbacks(IInteractActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @SkipConversation.started -= instance.OnSkipConversation;
            @SkipConversation.performed -= instance.OnSkipConversation;
            @SkipConversation.canceled -= instance.OnSkipConversation;
        }

        public void RemoveCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractActions @Interact => new InteractActions(this);
    public interface IPlayerMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPlayerAbilityTriggerActions
    {
        void OnAbility1(InputAction.CallbackContext context);
        void OnAbility2(InputAction.CallbackContext context);
        void OnAbility3(InputAction.CallbackContext context);
        void OnAbility4(InputAction.CallbackContext context);
        void OnAbility5(InputAction.CallbackContext context);
        void OnBasicAttack(InputAction.CallbackContext context);
        void OnConsum1(InputAction.CallbackContext context);
        void OnConsum2(InputAction.CallbackContext context);
    }
    public interface IInteractActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnSkipConversation(InputAction.CallbackContext context);
    }
}
